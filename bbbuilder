#!/bin/bash

set -x

# Import configuration file
. ./bbbuilder.conf

# Static variables
[ "x$TMP_DIR" = "x" ] && TMP_DIR=/tmp/moode
[ "x$IMG_URL" = "x" ] && IMG_URL='https://downloads.raspberrypi.org/raspbian_lite_latest'
[ "x$IMG_ROOT" = "x" ] && IMG_ROOT=root
[ "x$IMG_SIZE" = "x" ] && IMG_SIZE=3G
[ "x$ENABLE_SQUASHFS" = "x" ] && ENABLE_SQUASHFS=1
[ "x$ENABLE_CCACHE" = "x" ] && ENABLE_CCACHE=1
[ "x$CCACHE_DIR" = "x" ] && CCACHE_DIR=/var/cache/ccache
[ "x$CREATE_ZIP" = "x" ] && CREATE_ZIP=1
[ "x$ZIP_FORMAT" = "x" ] && ZIP_FORMAT=ZIP
[ "x$DELETE_TMP" = "x" ] && DELETE_TMP=0
[ "x$DEV_MODE" = "x" ] && DEV_MODE=0

# Dynamic variables
STARTDIR=$PWD
BBB_LOG=$STARTDIR/$0.log
BBB_IMGPATH=$TMP_DIR/$IMG_ROOT

#######################
# 3rd level functions #
#######################

function bbb_log {
	# Prepend time for each row and redirect to log
	awk '{ print strftime("%T: "), $0; fflush(); }' >> $1
}

function bbb_checkfile {
	if [ "x$1" = "x" ]
	then
		echo "No file specified"
		exit 1
	fi
	if [ ! -f $1 ]
	then
		echo "File $1 does not exist!"
		exit 1
	fi
}

#######################
# 2nd level functions #
#######################

function bbb_download {
	# In DEV mode, there's no download and unzip, the existing img file is used
	if [ $DEV_MODE -eq 0 ]
	then
		[ ! -d $TMP_DIR ] && mkdir $TMP_DIR
		# Download the image
		echo -n "Downloading image from $IMG_URL..."
		ZIPNAME=$(basename $(wget -nc -q -S -P $TMP_DIR --content-disposition $IMG_URL 2>&1 | grep Location: | tail -n1 | awk '{print $2}'))
		echo "Done."
		# Unzip the image
		echo -n "Unzip the image $ZIPNAME..."
		unzip -n $TMP_DIR/$ZIPNAME -d $TMP_DIR > $STARTDIR/$0.log
		echo "Done."
		# Retrieve the image name
		SRC_IMAGENAME=$(unzip -v $TMP_DIR/$ZIPNAME | grep ".img" | awk '{print $8}')
	else
		SRC_IMAGENAME=$(ls $TMP_DIR/*.img 2>/dev/null)
		[ ! $? -eq 0 ] && echo "No images found!!!" && exit $?
		SRC_IMAGENAME=$(echo $SRC_IMAGENAME | head -n1 )
	fi
}

function bbb_ls {
	find $TMP_DIR -maxdepth 1 -type f
}

function bbb_enable_ccache {
	# Create CCACHE environment
	echo -n "Create CCACHE environment..."
	if [ ! -d $CCACHE_DIR ]
	then
		sudo mkdir $CCACHE_DIR
		sudo chown root:root $CCACHE_DIR
		sudo chmod 777 $CCACHE_DIR
	fi
	if [ ! -d $BBB_IMGPATH$CCACHE_DIR ]
	then
		sudo mkdir $BBB_IMGPATH$CCACHE_DIR
		sudo chmod 777 $BBB_IMGPATH$CCACHE_DIR
		sudo mount --bind $CCACHE_DIR $BBB_IMGPATH$CCACHE_DIR
	fi
	echo "cache_dir = $CCACHE_DIR" | sudo tee --append $BBB_IMGPATH/etc/ccache.conf
	sudo chroot root apt-get -y install ccache
	echo "Done."
}

function bbb_disable_ccache {
	# Remove CCACHE environment
	if [ $ENABLE_CCACHE -eq 1 ]
	then
		echo -n "Clean CCACHE environment"...
		sudo chroot root apt-get -y purge ccache
		sudo rm -f $BBB_IMGPATH/etc/ccache.conf
		sudo umount $BBB_IMGPATH$CCACHE_DIR
		sudo rm -r $BBB_IMGPATH$CCACHE_DIR
		echo "Done."
	fi
}

function bbb_addheader {
	# Add header to run.sh in the image
	echo -n "Add header to run.sh..."
	cat <<-EOF > $BBB_IMGPATH/home/pi/run.sh
		#!/bin/bash

		set -x

		NPROC=\$(nproc)
		BUILDHOSTNAME=\$(hostname)

		echo "Is SQUASHFS enabled: "\$ENABLE_SQUASHFS
		echo "Is CCACHE enabled: "\$ENABLE_CCACHE

		if [ \$ENABLE_CCACHE -eq 1 ]
		then
		#	 export PATH=/usr/lib/ccache:\$PATH
			 export CC="ccache gcc"
			 export CXX="ccache g++"
		fi

		export CFLAGS="-O3"
		export CXXFLAGS="-O3"
		export MAKEFLAGS="-j\$NPROC"

		echo ""
		echo "C: "\$CC" "\$(which gcc)
		echo "C flags: "\$CFLAGS
		echo "C++: "\$CXX" "\$(which g++)
		echo "C++ flags: "\$CXXFLAGS
		echo "MAKE flags: "\$MAKEFLAGS
	EOF
	chmod +x $BBB_IMGPATH/home/pi/run.sh
	echo "Done."
}

function bbb_mount {
	case $1 in
	resizeimage)
		FULLSRC_IMAGE=$TMP_DIR/$SRC_IMAGENAME
		# Extend the image size to $IMG_SIZE
		echo -n "Extend image size to $IMG_SIZE..."
		truncate -s $IMG_SIZE $FULLSRC_IMAGE
		echo "Done."
		# Expand root partition in the image
		echo -n "Expand root partition..."
		PARTINFO=$(sfdisk -d $FULLSRC_IMAGE | tail -n1)
		sfdisk --delete $FULLSRC_IMAGE 2
		echo $PARTINFO | sed '$s/ size.*,//' | sfdisk --append $FULLSRC_IMAGE 2>&1
		echo "Done."
		;;
	*)
		bbb_checkfile $1
		FULLSRC_IMAGE=$1
		;;
	esac

	# Create loopback devices for the image and its partitions
	echo -n "Creating loop devices..."
	sudo losetup -f -P $FULLSRC_IMAGE
	LOOPDEV=$(sudo losetup -j $FULLSRC_IMAGE | awk '{print $1}' | sed 's/.$//g')
	echo "Done."
	# Check the root partition
	echo -n "Check root filesystems..."
	sudo e2fsck -fp $LOOPDEV"p2" 2>&1
	echo "Done."
	
	if [ "$1" = "resizeimage" ]
	then
		# Resize the root partition
		echo -n "Resize root partition..."
		sudo resize2fs $LOOPDEV"p2" 2>&1
		echo "Done."
	fi
	
	# Mount the image filesystems
	echo -n "Mounting all the partitions in $BBB_IMGPATH..."
	[ ! -d $BBB_IMGPATH ] && mkdir $BBB_IMGPATH
	sudo mount -t ext4 $LOOPDEV"p2" $BBB_IMGPATH &&
	sudo mount -t vfat $LOOPDEV"p1" $BBB_IMGPATH/boot &&
	sudo mount -t tmpfs -o nosuid,nodev,mode=755 /run $BBB_IMGPATH/run &&
	sudo mount -t devpts /dev/pts $BBB_IMGPATH/dev/pts &&
	sudo mount -t proc /proc $BBB_IMGPATH/proc &&
	sudo mkdir $BBB_IMGPATH/mnt/resources &&
	sudo mount --bind $STARTDIR/resources $BBB_IMGPATH/mnt/resources &&
	echo "Done."
	return $?
}

function bbb_unmount {
	# Unmount everything
	echo -n "Unmount all partitions..."
	sudo umount $BBB_IMGPATH/mnt/resources
	sudo rmdir $BBB_IMGPATH/mnt/resources
	sudo umount $BBB_IMGPATH/proc $BBB_IMGPATH/dev/pts $BBB_IMGPATH/run $BBB_IMGPATH/boot $BBB_IMGPATH

	echo "Done."
	# Delete the loopback devices
	echo -n "Delete loopback device..."
	sudo losetup -D
	echo "Done."
}

function bbb_manageimage {
	# In DEV mode there's no rename, move and zip for the image 
	if [ $DEV_MODE -eq 0 ]
	then
		# Rename the image
		mv $SRC_IMAGENAME $TGTIMG_NAME".img"

		# ZIP the image if set
		if [ $CREATE_ZIP -eq 1 ]
		then
			echo -n "Zipping the image $TGTIMG_NAME.img in $STARTDIR..."
			case $ZIP_FORMAT in
				ZIP)
					zip -b $TMP_DIR $STARTDIR/$TGTIMG_NAME".img.zip" $TMP_DIR/$TGTIMG_NAME".img" &&
					rm -f $TGTIMG_NAME".img"
					;;
				XZ)
					xz -T0 $TMP_DIR/$TGTIMG_NAME".img" &&
					mv $TMP_DIR/$TGTIMG_NAME".img.xz" $STARTDIR/
					;;
				*)
					echo "Compression $ZIP_FORMAT not supported."
					;;
			esac
			echo "Done."
		else
			echo -n "Moving the image $TMP_DIR/$TGTIMG_NAME.img in $STARTDIR..."
			mv $TMP_DIR/$TGTIMG_NAME".img" $STARTDIR/
			echo "Done."
		fi
	fi
}

function bbb_cleanup {
		# Delete TMP directory
		[ $DELETE_TMP -eq 1 ] && sudo rm -rf $TMP_DIR
}

#######################
# 1st Level Functions #
#######################

function bbb_prepare {
	# Prepare directories
	
	bbb_download
	bbb_mount $1

	[ $ENABLE_CCACHE -eq 1 ] && bbb_enable_ccache
	
	bbb_addheader
}

function bbb_exec {
	# Run the batch in chrooted environment
	echo -n "Running $BATCHFILE to build. Log file in $BATCHFILE.log..."
	cat $BATCHFILE >> $BBB_IMGPATH/home/pi/run.sh
	echo "sudo chroot $BBB_IMGPATH sudo -u pi ENABLE_CCACHE=$ENABLE_CCACHE ENABLE_SQUASHFS=$ENABLE_SQUASHFS /home/pi/run.sh 2>&1 | bbb_log $BBB_CHROOTLOG"
	echo "Done."
	rm $BBB_IMGPATH/home/pi/run.sh
}

function bbb_interactive {
	# Run interactive chrooted environment
	echo "Interactive chroot mode. Press CTRL+D or type EXIT to close interactive chroot mode."
	sudo chroot $BBB_IMGPATH su - pi -c "ENABLE_CCACHE=$ENABLE_CCACHE ENABLE_SQUASHFS=$ENABLE_SQUASHFS bash"
	echo "Closed."
	rm $BBB_IMGPATH/home/pi/run.sh
}

function bbb_finalize {
	bbb_disable_ccache
	bbb_unmount
	bbb_manageimage
	bbb_cleanup
}

function bbb_help {
	cat <<-EOF
		rpi_moode_build

		Release version 1.9

		This project aims to build Moode on a vanilla raspbian with the maximum efficiency on compilation and execution, generating an image file to be installed on an SD card.

		Usage:

			bbbuild [arg1]

		Where:

		    arg1 is the command to run or the bbb batch to be executed in chrooted environment.
		
		Command available:
		
		mount <file>
		    Mount the image <file> in the $BBB_IMGPATH
		
		unmount
		    Unmount the image
		
		interactive <file>
		    Mount the image <file> and run a bash shell in the chrooted environment.
		
		help
		    This message

		Environment variables:

		TMP_DIR
		    Default: /tmp/moode
		    The temporary directory where start the job
		IMG_URL
		    Default: https://downloads.raspberrypi.org/raspbian_lite_latest
		    The URL where to download the base OS
		IMG_ROOT
		    Default: root
		    The directory where the immage will be mounted
		IMG_SIZE
		    Default: 3G
		    The resizing value of the image expressed in GB
		ENABLE_SQUASHFS
		    Default: 1
		    Set to 0 to disable it. Enable the creation of the SquashFS filesystem. See moode recipe.
		ENABLE_CCACHE
		    Default: 1
		    Set to 0 to disable it. Enable the compiler cache. This will speedup everything from the 2nd time.
		CCACHE_DIR
		    Default: /var/cache/ccache
		    Set the CCACHE directory
		CREATE_ZIP
		    Default: 1
		    Set to 0 to disable it. ZIP the image at the end of the build
		ZIP_FORMAT
		    Default: ZIP
		    Set to XZ to use LZMA compression or ZIP to use ZIP compression
		DELETE_TMP
		    Default: 0
		    Set to 1 to enable it. Delete everything after the build
		DEV_MODE
		    Default: 0
		    Set to 1 to enable it. Enable the developer mode: No download and unzip, the existing img file in the working directory is used. No rename, move and zip of the image after the build: DELETE_TMP and CREATE_ZIP is ignored.
	EOF
}

########
# Main #
########

case _$1 in
	_interactive)
		echo "Interactive mode"
		bbb_prepare $2 | bbb_log $BBB_LOG
		bbb_interactive | bbb_log $BBB_LOG
		bbb_finalize | bbb_log $BBB_LOG
		;;
	_mount)
		echo "Mount image only"
		bbb_mount $2
		;;
	_unmount)
		echo "Unmount image partitions only"
		bbb_unmount
		;;
	_ls)
		echo "List files in $TMP_DIR"
		bbb_ls
		;;
	_help)
		bbb_help
		;;
	_)
		echo "No command or file specified!"
		exit 1
		;;
	*)
		bbb_checkfile $1
		BATCHFILE=$(realpath $1).bbb
		BBB_CHROOTLOG=$(realpath $1).log
		TGTIMAGE_NAME=$(date +%Y-%m-%d)-$1
		bbb_prepare resizeimage | bbb_log $BBB_LOG
		bbb_exec | bbb_log $BBB_LOG
		bbb_finalize | bbb_log $BBB_LOG
		;;
esac
