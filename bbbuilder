#!/bin/bash

# Enable debug mode if DEBUG=1 is set
test ${DEBUG:-0} -eq 1 && set -x

# Define starting directory
STARTDIR=${PWD}

# Import configuration file
test -z "${BBB_CONFDIR:-}" && BBB_CONFDIR=conf
test -f "${PWD}/${BBB_CONFDIR}/bbbuilder.conf" && . ${PWD}/conf/bbbuilder.conf

# Static variables
test -z "${ENABLE_SQUASHFS:-}" && ENABLE_SQUASHFS=0
test -z "${CCACHE_ENABLED:-}" && CCACHE_ENABLED=1
test -z "${CCACHE_DIR:-}" && CCACHE_DIR=/var/cache/ccache
test -z "${BBB_OSURL:-}" && BBB_OSURL='https://downloads.raspberrypi.org/raspbian_lite_latest'
test -z "${BBB_OSDIR}" && BBB_OSDIR=osimages
test -z "${BBB_WORKDIR:-}" && BBB_WORKDIR=/tmp/moode
test -z "${BBB_DELWORKDIR:-}" && BBB_DELWORKDIR=0
test -z "${BBB_CHROOTDIR:-}" && BBB_CHROOTDIR=root
test -z "${BBB_IMGDIR:-}" && BBB_IMGDIR=images
test -z "${BBB_IMGSIZE:-}" && BBB_IMGSIZE=3G
test -z "${BBB_LOG:-}" && BBB_LOG=bbbuilder.log
test -z "${BBB_LOGDIR:-}" && BBB_LOGDIR=logs
test -z "${BBB_PKGCACHEDIR:-}" && BBB_PKGCACHEDIR=pkgcache

# Dynamic variables
BBB_CHROOTPATH=${BBB_WORKDIR}/${BBB_CHROOTDIR}
BBB_IMGPATH=${STARTDIR}/${BBB_IMGDIR}
BBB_LOGPATH=${STARTDIR}/${BBB_LOGDIR}
BBB_PKGCACHEPATH=${BBB_PKGCACHEDIR}/apt/archives

#######################
# 3rd level functions #
#######################

function bbb_log () {
	awk '{ print strftime("%T "), $0; fflush(); }' >> ${BBB_LOGPATH}/${1}
}

function bbb_checkfile () {
	test -z "${1:-}" &&	echo "No file specified" &&	exit 1
	test ! -f ${1} && echo "File ${1} does not exist!" && exit 1
}

#######################
# 2nd level functions #
#######################

function bbb_download () {
	# Download the image
	echo -n "Downloading image from ${BBB_OSURL}..."
	ZIPNAME=$(basename $(wget -nc -q -S -P ${BBB_OSDIR} --content-disposition ${BBB_OSURL} 2>&1 | grep Location: | tail -n1 | awk '{print $2}'))
	echo "Done."
	# Unzip the image
	echo -n "Unzip the image ${ZIPNAME}..."
	unzip -n ${BBB_OSDIR}/${ZIPNAME} -d ${BBB_WORKDIR}
	echo "Done."
	# Retrieve the image name
	SRCIMG_NAME=$(unzip -v ${BBB_OSDIR}/${ZIPNAME} | grep ".img" | awk '{print $8}')
}

function bbb_enable_ccache () {
	# Create CCACHE environment
	echo -n "Create CCACHE environment..."
	if [ ! -d ${CCACHE_DIR} ]
	then
		sudo mkdir ${CCACHE_DIR}
		sudo chown root:root ${CCACHE_DIR}
		sudo chmod 777 ${CCACHE_DIR}
	fi
	if [ ! -d ${BBB_CHROOTPATH}${CCACHE_DIR} ]
	then
		sudo mkdir ${BBB_CHROOTPATH}${CCACHE_DIR}
		sudo chmod 777 ${BBB_CHROOTPATH}${CCACHE_DIR}
		sudo mount --bind ${CCACHE_DIR} ${BBB_CHROOTPATH}${CCACHE_DIR}
	fi
	echo "cache_dir = ${CCACHE_DIR}" | sudo tee --append ${BBB_CHROOTPATH}/etc/ccache.conf
	sudo chroot ${BBB_CHROOTPATH} apt-get -y install ccache
	echo "Done."
}

function bbb_disable_ccache () {
	# Remove CCACHE environment
	echo -n "Clean CCACHE environment"...
	sudo chroot ${BBB_CHROOTPATH} apt-get -y purge ccache
	sudo rm -f ${BBB_CHROOTPATH}/etc/ccache.conf
	sudo umount ${BBB_CHROOTPATH}${CCACHE_DIR}
	sudo rm -r ${BBB_CHROOTPATH}${CCACHE_DIR}
	echo "Done."
}

function bbb_addheader () {
	# Add header to run.sh in the image
	echo -n "Add header to run.sh..."
	cat <<-EOF > ${BBB_CHROOTPATH}/home/pi/run.sh
		#!/bin/bash

		set -x

		NPROC=\$(nproc)
		BUILDHOSTNAME=\$(hostname)

		echo "Is SQUASHFS enabled: "\${ENABLE_SQUASHFS}
		echo "Is CCACHE enabled: "\${CCACHE_ENABLED}

		if [ \${CCACHE_ENABLED} -eq 1 ]
		then
		#	 export PATH=/usr/lib/ccache:\${PATH}
			 export CC="ccache gcc"
			 export CXX="ccache g++"
		fi

		export CFLAGS="${CFLAGS}"
		export CXXFLAGS="${CXXFLAGS}"
		export MAKEFLAGS="-j\${NPROC} V=1"

		echo ""
		echo "C: "\${CC}" "\$(which gcc)
		echo "C flags: "\${CFLAGS}
		echo "C++: "\${CXX}" "\$(which g++)
		echo "C++ flags: "\${CXXFLAGS}
		echo "MAKE flags: "\${MAKEFLAGS}
	EOF
	chmod +x ${BBB_CHROOTPATH}/home/pi/run.sh
	echo "Done."
}

function bbb_mount () {
	case ${1} in
	resizeimage)
		FULLSRC_IMAGE=${BBB_WORKDIR}/${SRCIMG_NAME}
		# Extend the image size to ${BBB_IMGSIZE}
		echo -n "Extend image size to ${BBB_IMGSIZE}..."
		truncate -s ${BBB_IMGSIZE} ${FULLSRC_IMAGE}
		echo "Done."
		# Expand root partition in the image
		echo -n "Expand root partition..."
		PARTINFO=$(sfdisk -d ${FULLSRC_IMAGE} | tail -n1)
		sfdisk --delete ${FULLSRC_IMAGE} 2
		echo ${PARTINFO} | sed '$s/ size.*,//' | sfdisk --append ${FULLSRC_IMAGE} 2>&1
		echo "Done."
		;;
	*)
		bbb_checkfile ${1}
		FULLSRC_IMAGE=${1}
		;;
	esac

	# Create loopback devices for the image and its partitions
	echo -n "Creating loop devices..."
	sudo losetup -f -P ${FULLSRC_IMAGE}
	LOOPDEV=$(sudo losetup -j ${FULLSRC_IMAGE} | awk '{print $1}' | sed 's/.$//g')
	echo "Done."
	# Check the root partition
	echo -n "Check root filesystems..."
	sudo e2fsck -fp ${LOOPDEV}"p2" 2>&1
	echo "Done."
	
	if [ "${1}" = "resizeimage" ]
	then
		# Resize the root partition
		echo -n "Resize root partition..."
		sudo resize2fs ${LOOPDEV}"p2" 2>&1
		echo "Done."
	fi
	
	# Mount the image filesystems
	echo -n "Mounting all the partitions in ${BBB_CHROOTPATH}..."
	sudo mount -t ext4 ${LOOPDEV}"p2" ${BBB_CHROOTPATH} &&
	sudo mount -t vfat ${LOOPDEV}"p1" ${BBB_CHROOTPATH}/boot &&
	sudo mount -t tmpfs -o nosuid,nodev,mode=755 /run ${BBB_CHROOTPATH}/run &&
	sudo mount -t devpts /dev/pts ${BBB_CHROOTPATH}/dev/pts &&
	sudo mount -t proc /proc ${BBB_CHROOTPATH}/proc &&
	sudo mkdir ${BBB_CHROOTPATH}/mnt/resources &&
	sudo mount --bind ${STARTDIR}/resources ${BBB_CHROOTPATH}/mnt/resources &&
	sudo mount --bind ${BBB_PKGCACHEPATH} ${BBB_CHROOTPATH}/var/cache/apt/archives &&
	echo "Done."
	return ${?}
}

function bbb_unmount () {
	# Unmount everything
	echo -n "Unmount all partitions..."
	sudo umount ${BBB_CHROOTPATH}/mnt/resources
	sudo rmdir ${BBB_CHROOTPATH}/mnt/resources
	sudo umount ${BBB_CHROOTPATH}/var/cache/apt/archives ${BBB_CHROOTPATH}/proc ${BBB_CHROOTPATH}/dev/pts ${BBB_CHROOTPATH}/run ${BBB_CHROOTPATH}/boot ${BBB_CHROOTPATH}

	echo "Done."
	# Delete the loopback devices
	echo -n "Delete loopback device..."
	sudo losetup -D
	echo "Done."
}

function bbb_manageimage () {
	# Rename the image
	mv ${FULLSRC_IMAGE} ${BBB_WORKDIR}/${TGTIMG_NAME}".img"
	# ZIP the image if ZIP_FORMAT is set
	echo -n "Zipping the image ${TGTIMG_NAME}.img in ${BBB_IMGPATH}..."
	case _${ZIP_FORMAT} in
		_ZIP)
			zip -j ${BBB_IMGPATH}/${TGTIMG_NAME}".img.zip" ${BBB_WORKDIR}/${TGTIMG_NAME}".img" &&
			rm -f ${BBB_WORKDIR}/${TGTIMG_NAME}".img"
			;;
		_XZ)
			xz -T0 ${BBB_WORKDIR}/${TGTIMG_NAME}".img" &&
			mv ${BBB_WORKDIR}/${TGTIMG_NAME}".img.xz" ${BBB_IMGPATH}/
			;;
		_)
			mv ${BBB_WORKDIR}/${TGTIMG_NAME}".img" ${BBB_IMGPATH}/
			;;
		*)
			echo "Compression ${ZIP_FORMAT} not supported."
			;;
	esac
	echo "Done."
}

function bbb_cleanup () {
		# Delete working directory
		test ${BBB_DELWORKDIR} -eq 1 && sudo rm -rf ${BBB_WORKDIR}
}

#######################
# 1st Level Functions #
#######################

function bbb_checkenv () {
	test ! -x /usr/bin/gawk && echo -e "Please install gawk package!!!\nHelp: sudo apt-get -y install gawk\n" && exit 1
	test | -d ${BBB_OSDIR} && mkdir -p ${BBB_OSDIR}
	test ! -d ${BBB_CHROOTPATH} && mkdir -p ${BBB_CHROOTPATH}
	test ! -d ${BBB_IMGPATH} && mkdir -p ${BBB_IMGPATH}
	test ! -d ${BBB_LOGPATH} && mkdir -p ${BBB_LOGPATH}
	test ! -d ${BBB_WORKDIR} && mkdir -p ${BBB_WORKDIR}
	test ! -d ${BBB_PKGCACHEPATH} && mkdir -p ${BBB_PKGCACHEPATH}
}

function bbb_build () {
	BATCHFILE=$(realpath ${STARTDIR}/bbbs/${1}.bbb)
	TGTIMG_NAME=$(date +%Y%m%d-%H%M%S)-${1}
	BUILD_LOGNAME=$(date +%Y%m%d-%H%M%S)-${1}.log
	bbb_download
	bbb_mount resizeimage
	test ${CCACHE_ENABLED} -eq 1 && bbb_enable_ccache
	bbb_addheader
	# Run the batch in chrooted environment
	echo -n "Running ${BATCHFILE} to build. Log file in ${BBBLOG_PATH}/${BUILD_LOGNAME}..."
	cat ${BATCHFILE} >> ${BBB_CHROOTPATH}/home/pi/run.sh
	sudo chroot ${BBB_CHROOTPATH} sudo -u pi CCACHE_ENABLED=${CCACHE_ENABLED} ENABLE_SQUASHFS=${ENABLE_SQUASHFS} /home/pi/run.sh 2>&1 | bbb_log ${BUILD_LOGNAME}
	echo "Done."
	rm ${BBB_CHROOTPATH}/home/pi/run.sh
	xz -T0 ${BBB_LOGPATH}/${BUILD_LOGNAME}
	cp ${BBB_LOGPATH}/${BUILD_LOGNAME}.xz ${BBB_CHROOTPATH}/home/pi/
	test ${CCACHE_ENABLED} -eq 1 && bbb_disable_ccache
	bbb_unmount
	bbb_manageimage
	bbb_cleanup
}

function bbb_interactive () {
	echo "Interactive mode"
	bbb_mount ${1}
	bbb_addheader
	# Run interactive chrooted environment
	echo "Interactive chroot mode. Press CTRL+D or type EXIT to close interactive chroot mode."
	sudo chroot ${BBB_CHROOTPATH} su - pi -c "CCACHE_ENABLED=${CCACHE_ENABLED} ENABLE_SQUASHFS=${ENABLE_SQUASHFS} bash"
	echo "Closed."
	rm ${BBB_CHROOTPATH}/home/pi/run.sh
	bbb_unmount
}

function bbb_ls () {
	find ${1} -maxdepth 1 -type f -exec basename {} \; | sed 's/\..*$//g'
}
function bbb_help () {
	cat <<-EOF
		rpi_moode_build

		Release version 1.9

		This project aims to build Moode on a vanilla raspbian with the maximum efficiency on compilation and execution, generating an image file to be installed on an SD card.

		Usage:

			bbbuild [arg1]

		Where:

		    arg1 is the command to run or the bbb batch to be executed in chrooted environment.
		
		Command available:
		
		mount <file>
		    Mount the image <file> in the ${BBB_CHROOTPATH}
		
		unmount
		    Unmount the image
		
		interactive <file>
		    Mount the image <file> and run a bash shell in the chrooted environment.
		
		lsbbb
			List bbb batch file present.
		
		lswd
			List all the files present in the work directory

		help
		    This message

		Environment variables:

		BBB_OSURL
		    Default: https://downloads.raspberrypi.org/raspbian_lite_latest
		    The URL where to download the base OS
		BBB_OSDIR
			Default: osimages
			The path where the base OS will be saved
		BBB_WORKDIR
		    Default: /tmp/moode
		    The temporary directory where start the job
		BBB_DELWORKDIR
		    Default: 0
		    Set to 1 to enable it. Delete everything after the build
		BBB_CHROOTDIR
		    Default: root
		    The directory where the image will be mounted
		BBB_IMGDIR
		    Default: images
		    The directory where the created images will be stored
		BBB_IMGSIZE
		    Default: 3G
		    The resizing value of the image expressed in GB
		BBB_LOG
		    Default: bbbuilder.log
		    The name of the bbbuilder log
		BBB_LOGDIR
		    Default: logs
		    The directory where logs will be generated
		ENABLE_SQUASHFS
		    Default: 0
		    Set to 1 to enable it. Enable the creation of the SquashFS filesystem. See moode recipe.
		CCACHE_ENABLED
		    Default: 1
		    Set to 0 to disable it. Enable the compiler cache. This will speedup everything from the 2nd time.
		CCACHE_DIR
		    Default: /var/cache/ccache
		    Set the CCACHE directory
		ZIP_FORMAT
		    Default: none
		    Set to XZ to use LZMA compression or ZIP to use ZIP compression. If not defined no compression is applied.
	EOF
}

########
# Main #
########

bbb_checkenv

case _${1} in
	_interactive)
		bbb_interactive ${2}
		;;
	_mount)
		echo "Mount image only"
		bbb_mount ${2}
		;;
	_unmount)
		echo "Unmount image partitions only"
		bbb_unmount
		;;
	_lsbbb)
		echo "List BBBs"
		bbb_ls ${STARTDIR}/bbbs
		;;
	_lswd)
		echo "List files in ${BBB_WORKDIR}"
		bbb_ls ${BBB_WORKDIR}
		;;
	_help)
		bbb_help
		;;
	_)
		echo "No command or file specified!"
		exit 1
		;;
	*)
		bbb_checkfile ${STARTDIR}/bbbs/${1}.bbb
		bbb_build ${1} 2>&1 | bbb_log ${BBB_LOG}
		;;
esac
